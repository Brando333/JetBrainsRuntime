/*
 * Copyright 2000-2024 JetBrains s.r.o.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.jetbrains;

import java.awt.event.KeyEvent;

/**
 * JBR API to inspect additional properties of AWT key events.
 * In the future, this may be expanded to include other properties of keyboards.
 * */
public interface Keyboard {
    /**
     * Inspect, which physical key was pressed on the keyboard, regardless of the active logical keyboard layout.
     * The list of virtual key codes is found in {@link KeyEvent}.
     * The values for the same scan code may depend on the physical keyboard layout type (ANSI, ISO or JIS)
     *
     * @param event                                 JBR-generated event to inspect.
     *                                              This must either be a {@link KeyEvent#KEY_PRESSED} or
     *                                              a {@link KeyEvent#KEY_RELEASED} event
     *
     * @return                                      The key code of the corresponding key on the standard QWERTY layout
     *
     * @throws UnsupportedOperationException        Inspecting this property is not supported on the current platform,
     *                                              or the event was not generated by JBR
     * @throws IllegalArgumentException             Passed KeyEvent is not of a valid type
     */
    int getKeyEventUSKeyCode(KeyEvent event);

    /**
     * Get the dead key code for the event.
     * If the key (without modifiers) is dead on the current layout (current ASCII-capable layout if
     * national keyboard layout support is active), then return the corresponding dead key code,
     * otherwise return {@link KeyEvent#VK_UNDEFINED}.
     *
     * @param event                                 JBR-generated event to inspect.
     *                                              This must either be a {@link KeyEvent#KEY_PRESSED} or
     *                                              a {@link KeyEvent#KEY_RELEASED} event
     *
     * @return                                      The dead key code if the key is dead,
     *                                              or {@link KeyEvent#VK_UNDEFINED} otherwise
     *
     * @throws UnsupportedOperationException        Inspecting this property is not supported on the current platform,
     *                                              or the event was not generated by JBR
     * @throws IllegalArgumentException             Passed KeyEvent is not of a valid type
     */
    int getKeyEventDeadKeyCode(KeyEvent event);

    /**
     * Get the dead keystroke code for the event.
     * If the keystroke (with modifiers) is dead on the current layout (current ASCII-capable layout if
     * national keyboard layout support is active), then return the corresponding dead key code,
     * otherwise return {@link KeyEvent#VK_UNDEFINED}.
     *
     * @param event                                 JBR-generated event to inspect.
     *                                              This must either be a {@link KeyEvent#KEY_PRESSED} or
     *                                              a {@link KeyEvent#KEY_RELEASED} event
     *
     * @return                                      The dead keystroke code if the key is dead,
     *                                              or {@link KeyEvent#VK_UNDEFINED} otherwise
     *
     * @throws UnsupportedOperationException        Inspecting this property is not supported on the current platform,
     *                                              or the event was not generated by JBR
     * @throws IllegalArgumentException             Passed KeyEvent is not of a valid type
     */
    int getKeyEventDeadKeyStroke(KeyEvent event);

    /**
     * Get the characters, that this key event has produced.
     * For {@link KeyEvent#KEY_TYPED} it's equivalent to {@link KeyEvent#getKeyChar()}.
     * For {@link KeyEvent#KEY_RELEASED} it's always an empty string.
     *
     * @param event                                 JBR-generated event to inspect.
     *
     * @return                                      A string of characters that this event generated.
     *
     * @throws UnsupportedOperationException        Inspecting this property is not supported on the current platform,
     *                                              or the event was not generated by JBR
     */
    String getKeyEventCharacters(KeyEvent event);

    /**
     * Get platform-dependent logical keyboard layout identifier for the specified event.
     *
     * @param event                                 JBR-generated event to inspect.
     *
     * @return                                      Platform-dependent keyboard layout identifier.
     *
     * @throws UnsupportedOperationException        Inspecting this property is not supported on the current platform,
     *                                              or the event was not generated by JBR
     */
    String getKeyEventKeyboardLayout(KeyEvent event);
}